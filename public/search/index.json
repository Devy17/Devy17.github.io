[{"content":"빌드 (build) 컴퓨터 소프트웨어 분야에서 **소프트웨어 빌드(software build)**는 소스 코드 파일을 컴퓨터나 휴대폰에서 실행할 수 있는 독립(standalone) 소프트웨어 가공물로 변환하는 과정을 말하거나 그에 대한 결과물을 일컫는다.\n위키백과 - 소프트웨어 빌드\n우리가 작성한 소스 코드는 빌드 과정을 거쳐 사용자가 사용할 수 있도록 변환된다\n이는 C언어나 Java 뿐만 아니라 Python과 같은 모든 언어가 공유하는 특성이지만, 빌드 과정에서의 차이가 존재한다\nJava에서의 빌드 과정 (간략히 표시) 1 2 3 4 소스파일(.java) --\u0026gt; 자바 바이트코드(.class) --\u0026gt; JVM(Java Virtual Machine) 내부 실행 ^ | 컴파일 (javac) 빌드 도구 (Gradle 이전) Java 진영에서는 복잡한 빌드 과정을 쉽게 도와주는 빌드 도구를 주로 사용한다\n1. Apache Ant XML 기반으로 빌드 스크립트 작성 의존성 수동 관리 (라이브러리를 직접 다운로드 받아 lib 폴더에 넣는 방식) 절차적 방식 프로젝트에 맞는 유연한 작성 가능 $\\to$ 표준이 존재하지 않음 Ant 빌드 파일 예시 (build.xml)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;project name=\u0026#34;MyProject\u0026#34; default=\u0026#34;compile\u0026#34;\u0026gt; \u0026lt;!-- 속성 정의 --\u0026gt; \u0026lt;property name=\u0026#34;src.dir\u0026#34; value=\u0026#34;src\u0026#34;/\u0026gt; \u0026lt;property name=\u0026#34;build.dir\u0026#34; value=\u0026#34;build\u0026#34;/\u0026gt; \u0026lt;property name=\u0026#34;lib.dir\u0026#34; value=\u0026#34;lib\u0026#34;/\u0026gt; \u0026lt;!-- 컴파일 태스크 --\u0026gt; \u0026lt;target name=\u0026#34;compile\u0026#34;\u0026gt; \u0026lt;mkdir dir=\u0026#34;${build.dir}\u0026#34;/\u0026gt; \u0026lt;javac srcdir=\u0026#34;${src.dir}\u0026#34; destdir=\u0026#34;${build.dir}\u0026#34; classpath=\u0026#34;${lib.dir}/*\u0026#34;/\u0026gt; \u0026lt;/target\u0026gt; \u0026lt;!-- JAR 생성 --\u0026gt; \u0026lt;target name=\u0026#34;jar\u0026#34; depends=\u0026#34;compile\u0026#34;\u0026gt; \u0026lt;jar destfile=\u0026#34;${build.dir}/myapp.jar\u0026#34; basedir=\u0026#34;${build.dir}\u0026#34;/\u0026gt; \u0026lt;/target\u0026gt; \u0026lt;/project\u0026gt; 2. Apache Maven CoC (Convention over Configuration) - 정해진 규칙이 존재하여 설정 최소화 의존성 자동 관리 (중앙 저장소(Maven Central)에서 라이브러리 자동 다운로드) 표준 디렉토리 구조 1 2 3 4 5 6 7 8 9 10 my-project/ # === 구조 예시 === pom.xml # 빌드 설정 파일 src/ │ ├── main/ │ │ ├── java/ # 소스 코드 │ │ └── resources/ # 리소스 파일 │ └── test/ │ ├── java/ # 테스트 코드 │ └── resources/ # 테스트 리소스 └── target/ # 빌드 결과물 Maven의 생명주기 1 validate → compile → test → package → verify → install → deploy Maven 빌드 파일 예시 (pom.xml)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;groupId\u0026gt;com.example\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;my-app\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0.0\u0026lt;/version\u0026gt; \u0026lt;packaging\u0026gt;jar\u0026lt;/packaging\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;maven.compiler.source\u0026gt;17\u0026lt;/maven.compiler.source\u0026gt; \u0026lt;maven.compiler.target\u0026gt;17\u0026lt;/maven.compiler.target\u0026gt; \u0026lt;project.build.sourceEncoding\u0026gt;UTF-8\u0026lt;project.build.sourceEncoding\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.1.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;junit\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;junit\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;4.13.2\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/project\u0026gt; 3. Gradle Ant의 유연성과 Maven의 구조적 장점을 모은 빌드 도구 groovy 언어 기반 빌드 파일 작성 Project(빌드할 대상) Task(실행할 작업) 구조 프로젝트 구조 1 2 3 4 5 6 7 8 my-project/ ├── gradle/ │ └── wrapper/ │ ├── gradle-wrapper.jar │ └── gradle-wrapper.properties ├── gradlew # Unix 실행 스크립트 ├── gradlew.bat # Windows 실행 스크립트 └── build.gradle Gradle의 생명주기\nTask 확인\n1 gradle tasks --all # 모든 Task 보기 주요 Tasks\n1 2 3 4 5 6 7 8 9 10 11 12 | compileJava # Java 소스 컴파일 | processResources # 리소스 파일 처리 | classes # 컴파일 + 리소스 처리 | compileTestJava # 테스트 코드 컴파일 | processTestResources # 테스트 리소스 처리 | testClasses # 테스트 컴파일 + 리소스 | test # 테스트 실행 | jar # JAR 파일 생성 | assemble # 모든 아카이브 생성 | check # 모든 검증 작업 | build # assemble + check V\tclean # 빌드 결과물 삭제 Groovy 빌드 파일 예시 (build.gradle)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // 미리 만들어진 Task들의 모음 plugins { id \u0026#39;java\u0026#39; id \u0026#39;org.springframework.boot\u0026#39; version \u0026#39;3.1.0\u0026#39; } group = \u0026#39;com.example\u0026#39; version = \u0026#39;1.0.0\u0026#39; sourceCompatibility = \u0026#39;17\u0026#39; // 저장소 repositories { mavenCentral() } // 의존성 관리 dependencies { implementation \u0026#39;org.springframework.boot:spring-boot-starter-web\u0026#39; testImplementation \u0026#39;junit:junit:4.13.2\u0026#39; } Apache Maven과 Gradle 비교 Maven xml 기반의 복잡한 빌드 파일 유연성 부족 Gradle 증분 빌드 - 변경된 부분만 다시 빌드 병렬 실행 - 여러 모듈 동시 빌드 빌드 캐시 - 이전 빌드 결과 재사용 데몬 프로세스 - JVM 재시작 비용 절약 ","date":"2025-08-03T00:00:00Z","image":"https://devy17.github.io/node-js.webp","permalink":"https://devy17.github.io/p/gradle-%EB%B9%8C%EB%93%9C%EC%99%80-%EB%B9%8C%EB%93%9C-%EB%8F%84%EA%B5%AC/","title":"[Gradle] 빌드와 빌드 도구"},{"content":"빌드 (build) 컴퓨터 소프트웨어 분야에서 **소프트웨어 빌드(software build)**는 소스 코드 파일을 컴퓨터나 휴대폰에서 실행할 수 있는 독립(standalone) 소프트웨어 가공물로 변환하는 과정을 말하거나 그에 대한 결과물을 일컫는다.\n위키백과 - 소프트웨어 빌드\n우리가 작성한 소스 코드는 빌드 과정을 거쳐 사용자가 사용할 수 있도록 변환된다\n이는 C언어나 Java 뿐만 아니라 Python과 같은 모든 언어가 공유하는 특성이지만, 빌드 과정에서의 차이가 존재한다\nJava에서의 빌드 과정 (간략히 표시) 1 2 3 4 소스파일(.java) --\u0026gt; 자바 바이트코드(.class) --\u0026gt; JVM(Java Virtual Machine) 내부 실행 ^ | 컴파일 (javac) 빌드 도구 (Gradle 이전) Java 진영에서는 복잡한 빌드 과정을 쉽게 도와주는 빌드 도구를 주로 사용한다\n1. Apache Ant XML 기반으로 빌드 스크립트 작성 의존성 수동 관리 (라이브러리를 직접 다운로드 받아 lib 폴더에 넣는 방식) 절차적 방식 프로젝트에 맞는 유연한 작성 가능 $\\to$ 표준이 존재하지 않음 Ant 빌드 파일 예시 (build.xml)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;project name=\u0026#34;MyProject\u0026#34; default=\u0026#34;compile\u0026#34;\u0026gt; \u0026lt;!-- 속성 정의 --\u0026gt; \u0026lt;property name=\u0026#34;src.dir\u0026#34; value=\u0026#34;src\u0026#34;/\u0026gt; \u0026lt;property name=\u0026#34;build.dir\u0026#34; value=\u0026#34;build\u0026#34;/\u0026gt; \u0026lt;property name=\u0026#34;lib.dir\u0026#34; value=\u0026#34;lib\u0026#34;/\u0026gt; \u0026lt;!-- 컴파일 태스크 --\u0026gt; \u0026lt;target name=\u0026#34;compile\u0026#34;\u0026gt; \u0026lt;mkdir dir=\u0026#34;${build.dir}\u0026#34;/\u0026gt; \u0026lt;javac srcdir=\u0026#34;${src.dir}\u0026#34; destdir=\u0026#34;${build.dir}\u0026#34; classpath=\u0026#34;${lib.dir}/*\u0026#34;/\u0026gt; \u0026lt;/target\u0026gt; \u0026lt;!-- JAR 생성 --\u0026gt; \u0026lt;target name=\u0026#34;jar\u0026#34; depends=\u0026#34;compile\u0026#34;\u0026gt; \u0026lt;jar destfile=\u0026#34;${build.dir}/myapp.jar\u0026#34; basedir=\u0026#34;${build.dir}\u0026#34;/\u0026gt; \u0026lt;/target\u0026gt; \u0026lt;/project\u0026gt; 2. Apache Maven CoC (Convention over Configuration) - 정해진 규칙이 존재하여 설정 최소화 의존성 자동 관리 (중앙 저장소(Maven Central)에서 라이브러리 자동 다운로드) 표준 디렉토리 구조 1 2 3 4 5 6 7 8 9 10 my-project/ # === 구조 예시 === pom.xml # 빌드 설정 파일 src/ │ ├── main/ │ │ ├── java/ # 소스 코드 │ │ └── resources/ # 리소스 파일 │ └── test/ │ ├── java/ # 테스트 코드 │ └── resources/ # 테스트 리소스 └── target/ # 빌드 결과물 Maven의 생명주기 1 validate → compile → test → package → verify → install → deploy Maven 빌드 파일 예시 (pom.xml)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;groupId\u0026gt;com.example\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;my-app\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0.0\u0026lt;/version\u0026gt; \u0026lt;packaging\u0026gt;jar\u0026lt;/packaging\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;maven.compiler.source\u0026gt;17\u0026lt;/maven.compiler.source\u0026gt; \u0026lt;maven.compiler.target\u0026gt;17\u0026lt;/maven.compiler.target\u0026gt; \u0026lt;project.build.sourceEncoding\u0026gt;UTF-8\u0026lt;project.build.sourceEncoding\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.1.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;junit\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;junit\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;4.13.2\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/project\u0026gt; 3. Gradle Ant의 유연성과 Maven의 구조적 장점을 모은 빌드 도구 groovy 언어 기반 빌드 파일 작성 Project(빌드할 대상) Task(실행할 작업) 구조 프로젝트 구조 1 2 3 4 5 6 7 8 my-project/ ├── gradle/ │ └── wrapper/ │ ├── gradle-wrapper.jar │ └── gradle-wrapper.properties ├── gradlew # Unix 실행 스크립트 ├── gradlew.bat # Windows 실행 스크립트 └── build.gradle Gradle의 생명주기\nTask 확인\n1 gradle tasks --all # 모든 Task 보기 주요 Tasks\n1 2 3 4 5 6 7 8 9 10 11 12 | compileJava # Java 소스 컴파일 | processResources # 리소스 파일 처리 | classes # 컴파일 + 리소스 처리 | compileTestJava # 테스트 코드 컴파일 | processTestResources # 테스트 리소스 처리 | testClasses # 테스트 컴파일 + 리소스 | test # 테스트 실행 | jar # JAR 파일 생성 | assemble # 모든 아카이브 생성 | check # 모든 검증 작업 | build # assemble + check V\tclean # 빌드 결과물 삭제 Groovy 빌드 파일 예시 (build.gradle)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // 미리 만들어진 Task들의 모음 plugins { id \u0026#39;java\u0026#39; id \u0026#39;org.springframework.boot\u0026#39; version \u0026#39;3.1.0\u0026#39; } group = \u0026#39;com.example\u0026#39; version = \u0026#39;1.0.0\u0026#39; sourceCompatibility = \u0026#39;17\u0026#39; // 저장소 repositories { mavenCentral() } // 의존성 관리 dependencies { implementation \u0026#39;org.springframework.boot:spring-boot-starter-web\u0026#39; testImplementation \u0026#39;junit:junit:4.13.2\u0026#39; } Apache Maven과 Gradle 비교 Maven xml 기반의 복잡한 빌드 파일 유연성 부족 Gradle 증분 빌드 - 변경된 부분만 다시 빌드 병렬 실행 - 여러 모듈 동시 빌드 빌드 캐시 - 이전 빌드 결과 재사용 데몬 프로세스 - JVM 재시작 비용 절약 ","date":"2025-08-03T00:00:00Z","image":"https://devy17.github.io/node-js.webp","permalink":"https://devy17.github.io/p/gradle-%EB%B9%8C%EB%93%9C%EC%99%80-%EB%B9%8C%EB%93%9C-%EB%8F%84%EA%B5%AC/","title":"[Gradle] 빌드와 빌드 도구"},{"content":"본문의 버전은 2025년 8월 3일 기준으로 작성되었으며,\n이후 버전 업데이트에 따라 설치 방법이 변경될 수 있습니다.\nWindows npm 기준 1 2 3 4 5 6 7 8 9 10 11 # Chocolatey 설치 powershell -c \u0026#34;irm https://community.chocolatey.org/install.ps1|iex\u0026#34; # Node.js 설치 choco install nodejs --version=\u0026#34;22.18.0\u0026#34; # Node.js 버전 확인 node -v # Should print \u0026#34;v22.18.0\u0026#34;. # npm 버전 확인 npm -v # Should print \u0026#34;10.9.3\u0026#34;. yarn 기준 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Chocolatey 설치 powershell -c \u0026#34;irm https://community.chocolatey.org/install.ps1|iex\u0026#34; # Node.js 설치 choco install nodejs-lts --version=\u0026#34;22\u0026#34; # Node.js 버전 확인 node -v # \u0026#34;v22.18.0\u0026#34; # Yarn 설치 corepack enable yarn # Yarn 버전 확인 yarn -v Mac, Linux npm 기준 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # nvm 설치 curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash # shell 재시작 \\. \u0026#34;$HOME/.nvm/nvm.sh\u0026#34; # Node.js 설치 nvm install 22 # Node.js 버전 확인 node -v # \u0026#34;v22.18.0\u0026#34;. nvm current # \u0026#34;v22.18.0\u0026#34;. # npm 버전 확인 npm -v # \u0026#34;10.9.3\u0026#34;. yarn 기준 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # nvm 설치 curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash # Node.js 설치 nvm install 22 # Node.js 버전 확인 node -v # \u0026#34;v22.18.0\u0026#34; nvm current # \u0026#34;v22.18.0\u0026#34; # Yarn 설치 corepack enable yarn # Yarn 버전 확인 yarn -v npm, yarn npm은 Node.js의 기본 패키지 관리자로, 자바스크립트 패키지의 설치, 업데이트, 삭제 등을 관리합니다.\nyarn은 npm의 대안으로 나온 패키지 관리자로, 빠른 설치 속도와 안정적인 버전 관리가 특징입니다.\n참고 Node.js 공식 사이트 Chocolatey 공식 사이트 nvm Github 레포지토리 npm 공식 사이트 Yarn 공식 사이트 ","date":"2025-08-03T00:00:00Z","image":"https://devy17.github.io/p/node.js-%EC%84%A4%EC%B9%98/node-js_hu_b810428040125e29.webp","permalink":"https://devy17.github.io/p/node.js-%EC%84%A4%EC%B9%98/","title":"Node.js 설치"}]